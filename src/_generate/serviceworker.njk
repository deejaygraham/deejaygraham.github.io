---
permalink: /sw.js
eleventyExcludeFromCollections: true
excludeFromSitemap: true
---
// service worker code for site
// based on the example https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers
// some other ideas from https://github.com/bnijenhuis/bnijenhuis-nl 
// and https://gomakethings.com/how-to-set-an-expiration-date-for-items-in-a-service-worker-cache/

// change version to allow upgrade
const version = '-v1';

const cacheName = 'core' + version;
const offlinePage = '/offline.html';
const searchDatabase = '/search-index.json';
const siteStylesheet = '/css/site.css';
const notFoundPage = '/404.html'
const coreAssets = [
      "/index.html",
      siteStylesheet,
      "/favicon.ico",
      "/img/favicon.png",
      "/img/avatar.svg",
      offlinePage,
      searchDatabase,
      notFoundPage
];

// install service worker and cache core assets
addEventListener('install', function (event) {
    event.waitUntil(
        caches.open(cacheName).then(function (cache) {
            console.debug('Adding core assets to cache');

            try {
                cache.addAll(coreAssets);
            } catch {
                console.error('sw: cache.addAll');
                for (let asset of coreAssets) {
                    try {
                        cache.add(asset);
                    } catch (error) {
                        console.warn('sw: cache.add', asset);
                        console.warn('sw: ', error);
                    }
                }
            }
        })
    );
});

// make sure to remove old caches
addEventListener('activate', function (event) {
    console.debug('Deleting old cache data');
    event.waitUntil(
        caches.keys().then(function (keys) {
            return Promise.all(keys
                .filter(key => key !== cacheName)
                .map(key => caches.delete(key))
            )
        })
    )
});

// fetch assets and serve from cache and update cache
addEventListener('fetch', function (event) {
    // ignore anything that's not a GET
    if (event.request.method !== "GET") {
        return;
    }

    console.debug(event.request.url);

    if (event.request.url.includes(siteStylesheet)) {
        // (directly) respond with cached asset (if available)
        event.respondWith(serveFromCache(event, { ignoreSearch: true, checkExpiryHeader: false }));

        // serve from network
        //event.respondWith(serveFromNetwork(event));

        // update cache
        event.waitUntil(updateCache(event.request, cacheName));

    } else {
        // (directly) respond with cached asset (if available)
        event.respondWith(serveFromCache(event, { ignoreSearch: false, checkExpiryHeader: false }));

        // serve from network
        // event.respondWith(serveFromNetwork(event));

        // update cache (only if in core assets)
        if (coreAssets.includes(event.request.url)) {
            event.waitUntil(updateCache(event.request, cacheName));
        }
    }
});

/**
 * serve request from cache
 * if file isn't cached longer than 24 hours, it's still valid
 * @param {Event} event the request event
 * @param {Boolean} ignoreSearch if true, ignore search parameters in request
 * @param {Boolean} checkExpiryHeader if true, check for custom expiry header
 * @return {Object} response object from cache or from fetch
 */
function serveFromCache(event, { ignoreSearch, checkExpiryHeader } = {}) {
    // set the right match options
    var matchOptions = {};
    if (ignoreSearch) matchOptions = { ignoreSearch: true };

    console.debug('Attempting to serve from cache', event.request.url);

    return caches.match(event.request, matchOptions).then(function (cacheResponse) {
        // if found return cache
        if (cacheResponse) {
            if (checkExpiryHeader) {
                if (isCacheResponseStillValid(cacheResponse)) {
                    console.debug('cached response is fresh');
                    return cacheResponse;
                }
            } else {
                console.debug('cached response exists');
                return cacheResponse;
            }
        }

        console.debug('fetching from network');
        // fetch it again, because cache was not found or was expired
        return fetch(event.request).then(function (response) {
            if (event.request.url.includes(siteStylesheet)) {
                updateCache(event.request, cacheName);
            } 

            return response;

            // if offline and not found in cache, return offline data
        }).catch(function () {
            if (event.request.url.endsWith('/')) {
                return caches.match(offlinePage);
            } 
        });
    })
}

/**
 * Serve request from network
 *
 * @param {Event} event the request event
 * @return {Object} response object from fetch or from cache
 */
/* eslint-disable-next-line */
function serveFromNetwork(event) {
    console.debug('Attempting to serve from network', event.request.url);
    // try and get it from the network
    return fetch(event.request).then(function (response) {
        if ((event.request.destination == 'document') && (response.status == 404)) {
            return caches.match(notFoundPage);
        }

        return response;

    }).catch(function () {
        // try and get it from cache
        return caches.match(event.request).then(function (cacheResponse) {
            // if found return cache
            if (cacheResponse) {
                return cacheResponse;
            }

            // otherwise return 404 (if a document is requested)
            if (event.request.destination == 'document') {
                return caches.match(notFoundPage);
            }
        }).catch(function () {
            // otherwise return 404 (if a document is requested)
            if (event.request.destination == 'document') {
                return caches.match(notFoundPage);
            }
        });
    });
}

/**
 * update cache
 * @param {Object} request the event request
 * @param {String} cacheName the cache to update
 * @return {Object} response object
 */
function updateCache(request, cacheName) {

    console.debug('caching', request.url);
    return caches.open(cacheName).then(function (cache) {
        return fetch(request).then(function (response) {
            var responseCopy = response.clone();
            var headers = new Headers(responseCopy.headers);
            headers.append('sw-fetched-on', new Date().getTime());

            var requestKey = request;

            return responseCopy.blob().then(function (body) {
                return cache.put(requestKey, new Response(body, {
                    status: responseCopy.status,
                    statusText: responseCopy.statusText,
                    headers: headers
                }));
            });
        });
    });
}

/**
 * check of cacheResponse is still valid
 * if file isn't cached longer than 24 hours, it's still valid
 * @param {Object} cacheResponse the cacheResponse object
 * @return {Boolean} if true, cacheResponse is valid
 */
function isCacheResponseStillValid(cacheResponse) {
    if (!cacheResponse) {
        return false;
    }

    var fetched = cacheResponse.headers.get('sw-fetched-on');

    // ms * seconds * minutes * hours
    if (fetched && (parseFloat(fetched) + (1000 * 60 * 60 * 24)) > new Date().getTime()) {
        return true;
    }

    return false;
};
